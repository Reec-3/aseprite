name: Build Aseprite

on:
  push:
    branches:
      - main # Or whatever branch you want to trigger builds from
  workflow_dispatch: # Allows you to manually trigger the workflow from the GitHub UI

jobs:
  build:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      - name: Checkout Aseprite Source
        uses: actions/checkout@v4 # Action to check out your repository code
        with:
          repository: aseprite/aseprite # Specify the Aseprite repository
          ref: master # Or a specific tag/branch like 'v1.3.2' for a stable release
          path: aseprite # Check out into an 'aseprite' directory

      - name: Checkout Skia Source
        uses: actions/checkout@v4
        with:
          repository: aseprite/skia # Aseprite uses a custom Skia build
          ref: aseprite-m102 # Important: Use the Skia branch compatible with Aseprite's version
          path: skia # Check out into a 'skia' directory

      - name: Install Build Dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            libx11-dev \
            libxcursor-dev \
            libxi-dev \
            libgl1-mesa-dev \
            libfontconfig1-dev

      - name: Configure and Build Skia
        working-directory: skia # Run commands in the skia directory
        run: |
          python tools/gn/bootstrap/bootstrap.py --skip-gn-binaries
          ./bin/gn gen out/Release-x64 --args="is_debug=false skia_use_system_expat=false skia_use_system_libjpeg_turbo=false skia_use_system_libpng=false skia_use_system_libwebp=false skia_use_system_zlib=false skia_use_icu=false skia_enable_fontmgr_empty=false skia_enable_skottie=false skia_enable_tools=false skia_enable_gpu=true skia_gl_standard=gl"
          ninja -C out/Release-x64

      - name: Configure and Build Aseprite
        working-directory: aseprite # Run commands in the aseprite directory
        run: |
          mkdir build
          cd build
          # -DLAF_BACKEND=skia is crucial for using the custom Skia build
          # -DSKIA_DIR and -DSKIA_OUT_DIR point to the Skia build
          # -DCMAKE_BUILD_TYPE=RelWithDebInfo for optimized build with debug info
          cmake \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DLAF_BACKEND=skia \
            -DSKIA_DIR=../../skia \
            -DSKIA_OUT_DIR=../../skia/out/Release-x64 \
            ..
          cmake --build . --config RelWithDebInfo

      - name: Prepare Aseprite Application for Artifact
        run: |
          # The exact path of the built executable might vary slightly
          # depending on the Aseprite version and build system.
          # For Linux, it's typically in build/bin/aseprite
          # You might need to adjust this path based on your build output.
          # We'll create a simple directory to hold the executable.
          mkdir -p aseprite-build
          cp aseprite/build/bin/aseprite aseprite-build/aseprite
          # You might want to include other assets if necessary, e.g., themes.
          # cp -r aseprite/data aseprite-build/data # If you need data files
          ls -R aseprite-build # List contents to verify

      - name: Upload Aseprite Build as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: aseprite-linux-build
          path: aseprite-build/ # Upload the directory containing the executable
          retention-days: 7 # Keep the artifact for 7 days
