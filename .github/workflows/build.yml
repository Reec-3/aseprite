name: Build Aseprite (Windows Release GUI)

on:
  push:
    branches:
      - main # Trigger on pushes to your main branch
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [RelWithDebInfo]
        ui: [gui]
        scripting: [lua]

    steps:
    - name: Checkout Aseprite Source (Your Fork: Reec-3/aseprite)
      uses: actions/checkout@v4
      with:
        repository: Reec-3/aseprite # THIS MUST BE YOUR FORK
        ref: main # Assumes 'main' is the default branch of your fork
        submodules: 'recursive'

    # Removed 'Install Dependencies' step entirely as it's for Linux only and caused a syntax error.

    - name: Install Skia
      if: ${{ matrix.ui == 'gui' }}
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          this_dir=$(cygpath "${{ github.workspace }}")
        else
          this_dir="${{ github.workspace }}"
        fi
        skia_url=$(source $this_dir/laf/misc/skia-url.sh | xargs)
        skia_file=$(basename $skia_url)
        curl --ssl-revoke-best-effort -L -o "$skia_file" "$skia_url"
        unzip -o "$skia_file" -d skia

    # Removed 'ccache' step entirely as it's for Linux/macOS only and caused a syntax error.

    - name: Setup MSVC Environment
      uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows' # Only runs on Windows

    - name: Generating Makefiles
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          export enable_ccache=off # ccache is off on Windows
        else
          export enable_ccache=on # This branch won't be taken for Windows
        fi
        export laf_backend=${{ matrix.ui == 'gui' && 'skia' || 'none' }}
        export enable_scripting=${{ matrix.scripting == 'lua' && 'on' || 'off' }}
        export skia_arch=x64 # Fixed for x64 Windows build

        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DENABLE_TESTS=OFF \
          -DENABLE_SCRIPTING=$enable_scripting \
          -DENABLE_CCACHE=$enable_ccache \
          -DLAF_BACKEND=$laf_backend \
          -DSKIA_DIR=$(realpath skia) \
          -DSKIA_LIBRARY_DIR=$(realpath skia/out/Release-$skia_arch)

    - name: Compiling
      shell: bash
      run: |
        cd build && ninja

    - name: Prepare Aseprite Application for Artifact
      run: |
        mkdir -p aseprite-build
        $exe_path = "build/bin/aseprite.exe" # Common path for official Aseprite builds on Windows

        if (Test-Path $exe_path) {
          Copy-Item $exe_path -Destination "aseprite-build/"
          Write-Host "Copied aseprite.exe to artifact directory."
        } else {
          Write-Host "Aseprite executable not found at $exe_path. Listing build directory for debugging:"
          Get-ChildItem -Path "build" -Recurse
          exit 1
        }

        if (Test-Path "data") {
          Copy-Item -Path "data" -Destination "aseprite-build/data" -Recurse
          Write-Host "Copied 'data' folder to artifact directory."
        } else {
          Write-Host "Aseprite 'data' folder not found at source root."
        }
        Write-Host "Contents of aseprite-build directory:"
        Get-ChildItem -Path "aseprite-build" -Recurse
      shell: pwsh

    - name: Upload Aseprite Build as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: aseprite-windows-gui-relwithdebinfo-${{ github.sha }}
        path: aseprite-build/
        retention-days: 7
        if-no-files-found: error
